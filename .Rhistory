0.5633714880332986,
0.46375600584917487,
0.4869055101613241,
0.46313799621928164,
0.4838913455464308,
0.4633269921792433,
0.48505405978376087,
0.463108654050606,
0.4837953091684435,
0.4890885750962773,
0.48324022346368717,
0.4627831715210356,
0.4826614651061985,
0.4635155739490307,
0.48250218722659666,
0.49253075571177507)
# lambda = 0.02
nopers02 = c(0.647815434871376,
0.6494930684874819,
0.646594684385382,
0.6474505723204995,
0.6477961144767077,
0.6488581604860675,
0.6483931947069943,
0.6464518846072858,
0.6446839991545128,
0.6463854144583422,
0.6446948756113119,
0.64136460554371,
0.6422764227642277,
0.6400945423291792,
0.6418554476806904,
0.6436931079323797,
0.6429971683729035,
0.6412948381452318,
0.6401581722319859)
pers02 = c(0.5994283380971825,
0.5528657148768881,
0.5205564784053156,
0.5113423517169615,
0.6133277626906204,
0.6390111041273832,
0.4700693131695022,
0.5533796588755527,
0.4631156203762418,
0.48420606317574727,
0.46332128428662556,
0.49957356076759063,
0.4634146341463415,
0.4834550923936399,
0.5333333333333333,
0.48547897702644127,
0.5029405358309736,
0.5426509186351706,
0.4633128295254833)
# lambda = 0.05
nopers05 = c(0.6453654552878726,
0.6490792468446099,
0.6484634551495017,
0.6478668054110301,
0.6477961144767077,
0.648229624973811,
0.6490233144297417,
0.647715308485997,
0.6448953709575143,
0.6459614161543353,
0.6446948756113119,
0.6437100213219616,
0.6446298673513051,
0.6446067898581865,
0.6433656957928803,
0.6432596445600347,
0.6425615334349815,
0.6439195100612424,
0.6427943760984183)
pers05 = c(0.6363821968150265,
0.5251396648044693,
0.501453488372093,
0.5877211238293444,
0.5636097764779612,
0.6469725539492981,
0.4704893929846671,
0.5997052010949674,
0.6229127034453604,
0.5832096671613314,
0.4971294918137359,
0.5315565031982943,
0.5637569533590073,
0.6366566394499356,
0.4651564185544768,
0.4889466840052016,
0.5038118057068177,
0.4890638670166229,
0.5019771528998243)
round(cbind(nopers0,nopers01,nopers02,nopers05),3)
install.packages("xtable")
library(xtable)
toLatex
out = round(cbind(nopers0,nopers01,nopers02,nopers05),3)
toLatex(out)
round(cbind(nopers0,nopers01,nopers02,nopers05),3)
toLatex(xtable(round(cbind(nopers0,nopers01,nopers02,nopers05),3)))
toLatex(xtable(round(cbind(nopers0,nopers01,nopers02,nopers05),3),digits=3))
toLatex(xtable(round(cbind(pers0,pers01,pers02,pers05),3),digits=3))
a = c(1,1,1,0,0,1,1,0)
b = c(0,1,0,0,0,0,1,0)
t.test(a,b,alternative="twosided")
t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
library(Deducer)
install.packages("Deducer")
library(Deducer)
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
samp = rnorm(0,5)
t.test(samp)
samp = rnorm(5,0,1)
t.test(samp)
t.test(samp)$CI
t.test(samp)$confidence
t.test(samp)$confidenceinterval
t.test(samp)$conf
t.test(samp)$conf[1]
t.test(samp)$p.value
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$[1]
tupper = t.test(sample)$[2]
if(tlower <= 0 & tupper >= 0){
tcoverage += 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage += 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage += 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage += 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(sample) - qnorm(0.975)*sd(sample)/sqrt(5)
normupper = mean(sample) + qnorm(0.975)*sd(sample)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:200){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
}
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:200){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:50){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
pvalues2 = c()
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,0,1)
#update pvalues
pvalues2 = c(pvalues2,t.test(sample1,sample2)$p.value)
}
plot(pvalues2)
plot(pvalues)
plot(pvalues2)
hist(pvalues2)
hist(pvalues)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",")
getwd()
setwd("D:/projectgit/fp-nkullman-gclenagh-wfyang")
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",")
mismatches
head(mismatches)
len(mismatches[1])
length(mismatches[1])
length(mismatches[1,])
treatment = read.csv("rv144_trt_lookup.csv",sep=",")
treatment
len(mismatches[,1])
length(mismatches[,1])
mismatches[,1]
mismatches[1,1]
strsplit(mismatches[1,1],"AA")
strsplit(str(mismatches[1,1]),"AA")
mismatches[1,1]
ascharacter(mismatches[1,1])
str(mismatches[1,1])
mismatches[1,1]
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
treatments[1,1]
treatment[1,1]
strsplit(treatment[1,1],"AA")
strsplit(treatment[1,1],"AA")[2]
strsplit(treatment[1,1],"AA")[[1]][2]
int(strsplit(treatment[1,1],"AA")[[1]][2])
numeric(strsplit(treatment[1,1],"AA")[[1]][2])
strtoi(strsplit(treatment[1,1],"AA")[[1]][2])
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=","stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
strtoi(strsplit(mismatches[1,1],"AA")[[1]][2])
treatment[strtoi(strsplit(mismatches[1,1],"AA")[[1]][2])]
treatment[strtoi(strsplit(mismatches[1,1],"AA")[[1]][2]),]
treatment[strtoi(strsplit(mismatches[1,1],"AA")[[1]][2]),][2]
treatment[1,30]
treatment[1,1]
treatment[1,2]
mismatches.dimension
mismatches.dimensions
mismatches.size
mismatches.shape
size(mismatches)
shape(mismatches)
ncol
nrow
nrow(mismatches)
merge(mismatches,treatment)
mismatches
mismatches[,1]
names(mismatches)
names(mismatches)[0]=sampleID
names(mismatches)[0]="sampleID"
mismtaches
head(mismatches)
names(mismatches)[1]="sampleID"
head(mismatches)
head(treatment)
head(mismatches)
merge(mismatches,treatment,by="sampleID")
merge(mismatches,treatment,by="sampleID")[-1]
library(Deducer)
data
thedata = merge(mismatches,treatment,by="sampleID")[-1]
thedata
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "twosided"))
}
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided"))
}
pvalues
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided")$p.value)
}
pvalues
for(i in 1:length(pvalues)){
if(pvalues[i] == NA){
pvalues[i] = 1
}
}
for(i in 1:length(pvalues)){
if((pvalues[i] == NA)){
pvalues[i] = 1
}
}
pvalues[1] == NA
!exists(pvalues[1])
pvalues[1]
is.na(pvalues[1])
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
pvalues
min(pvalues)
which.min(pvalues)
sum(pvalues < 0.05)
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=100000)$p.value)
}
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
pvalues
write.csv(pvalues,"pvalues.csv")
temp = df(pvalues)
data.frame(pvalues)
names(Temp)
names(temp)
temp = data.frame(pvalues)
temp
names(temp)
temp = data.frame(pvalues)
write.csv(temp,"pvalues.csv")
setwd("D:/progress/fp-kullman-gclenagh-wfyang")
setwd("D:/progress/fp-kullman-gclenagh-wfyang")
temp = data.frame(pvalues)
write.csv(temp,"pvalues.csv",rownames=False)
temp = data.frame(pvalues)
write.csv(temp,"pvalues.csv",row.names=FALSE)
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv")
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",row.names=F)
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv")
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",col.names=c("siteplus1","pvalue"))
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",col.names=T)
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",row.names=F)
