0.4834550923936399,
0.5333333333333333,
0.48547897702644127,
0.5029405358309736,
0.5426509186351706,
0.4633128295254833)
# lambda = 0.05
nopers05 = c(0.6453654552878726,
0.6490792468446099,
0.6484634551495017,
0.6478668054110301,
0.6477961144767077,
0.648229624973811,
0.6490233144297417,
0.647715308485997,
0.6448953709575143,
0.6459614161543353,
0.6446948756113119,
0.6437100213219616,
0.6446298673513051,
0.6446067898581865,
0.6433656957928803,
0.6432596445600347,
0.6425615334349815,
0.6439195100612424,
0.6427943760984183)
pers05 = c(0.6363821968150265,
0.5251396648044693,
0.501453488372093,
0.5877211238293444,
0.5636097764779612,
0.6469725539492981,
0.4704893929846671,
0.5997052010949674,
0.6229127034453604,
0.5832096671613314,
0.4971294918137359,
0.5315565031982943,
0.5637569533590073,
0.6366566394499356,
0.4651564185544768,
0.4889466840052016,
0.5038118057068177,
0.4890638670166229,
0.5019771528998243)
round(cbind(nopers0,nopers01,nopers02,nopers05),3)
install.packages("xtable")
library(xtable)
toLatex
out = round(cbind(nopers0,nopers01,nopers02,nopers05),3)
toLatex(out)
round(cbind(nopers0,nopers01,nopers02,nopers05),3)
toLatex(xtable(round(cbind(nopers0,nopers01,nopers02,nopers05),3)))
toLatex(xtable(round(cbind(nopers0,nopers01,nopers02,nopers05),3),digits=3))
toLatex(xtable(round(cbind(pers0,pers01,pers02,pers05),3),digits=3))
a = c(1,1,1,0,0,1,1,0)
b = c(0,1,0,0,0,0,1,0)
t.test(a,b,alternative="twosided")
t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
library(Deducer)
install.packages("Deducer")
library(Deducer)
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
perm.t.test(a,b,alternative="two.sided")
samp = rnorm(0,5)
t.test(samp)
samp = rnorm(5,0,1)
t.test(samp)
t.test(samp)$CI
t.test(samp)$confidence
t.test(samp)$confidenceinterval
t.test(samp)$conf
t.test(samp)$conf[1]
t.test(samp)$p.value
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$[1]
tupper = t.test(sample)$[2]
if(tlower <= 0 & tupper >= 0){
tcoverage += 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage += 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage += 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage += 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
p.values = c(p.values,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(samp) - qnorm(0.975)*sd(samp)/sqrt(5)
normupper = mean(samp) + qnorm(0.975)*sd(samp)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:10000){
sample = rnorm(5,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample)$p.value)
#compute t CI and update coverage count
tlower = t.test(sample)$conf[1]
tupper = t.test(sample)$conf[2]
if(tlower <= 0 & tupper >= 0){
tcoverage = tcoverage + 1
}
# compute normal CI and update coverage count
normlower = mean(sample) - qnorm(0.975)*sd(sample)/sqrt(5)
normupper = mean(sample) + qnorm(0.975)*sd(sample)/sqrt(5)
if(normlower <= 0 & normupper >=0){
normcoverage = normcoverage + 1
}
}
print(normcoverage)
print(tcoverage)
sum(pvalues <= 0.05)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 1:200){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
}
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:200){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:50){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
tcoverage = 0
normcoverage = 0
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,0,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
plot(pvalues)
# a.
pvalues = c()
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,1,1)
#update pvalues
pvalues = c(pvalues,t.test(sample1,sample2)$p.value)
}
pvalues2 = c()
for(i in 2:100){
sample1 = rnorm(i,0,1)
sample2 = rnorm(i,0,1)
#update pvalues
pvalues2 = c(pvalues2,t.test(sample1,sample2)$p.value)
}
plot(pvalues2)
plot(pvalues)
plot(pvalues2)
hist(pvalues2)
hist(pvalues)
# Option #2
# For this quiz, use the following data.
x1 = c(2.35, -2.33, -1.84, 0.14, -3.39)
x2 = c(-0.24, -1.92, 1.08, 1.08, -4.04)
# 1. Using an appropriate test discussed in the lab, test whether the two
# population means are equal. Report the p-value and your conclusion.
# 2. Using an appropriate test you learned previously, test whether the two
# population means are equal. Report the p-value and your conclusion.
# 3. Do the two methods give the same result?
data = c(x1, x2)
groups = c(rep(1, 5), rep(2, 5))
summary(aov(data~groups))
t.test(x1, x2)
x = runif(5,0,1)
x
y = x+ rnorm(5,0,01)
y
x
lm(y~x)
glm(y~x)
dat = read.table("http://www.stat.washington.edu/marzban/390/9_1_dat.txt",header=TRUE)
dat
glm(Vibration ~ as.factor(Brand), data=dat)
lm(Vibration ~ as.factor(Brand), data=dat)
b1 = c(38.7,39.2,40.1,38.9)
b2 = c(41.9,42.3,41.3)
b3 = c(40.8,41.2,39.5,38.9,40.3)
all_b = c(b1,b2,b3)
labels0 = c(1,1,1,1,2,2,2,3,3,3,3,3)
labels1 = c(length(b1),length(b2),length(b3))
labels2 = c(mean(b1),mean(b2),mean(b3))
labels3 = c(sd(b1),sd(b2),sd(b3))
n = length(all_b)
# a)
y_dbar = 0
for (i in 3) {
each0 =labels1[i]/n*labels2[i]
y_dbar = y_dbar + each0
}
SS_bet = 0
for (i in 3) {
each = labels1[i]*(labels2[i]-y_dbar)^2
SS_bet = SS_bet + each
}
#b)
SS_within = 0
for (i in 3) {
each2 = (labels1[i]-1)*(labels3[i])^2
SS_within = SS_within + each2
}
#c)
numerator = 3 - 1
denominator = n - 3
#d)
Fobs = (SS_bet/numerator)/(SS_within/denominator)
#e)
aov.1 = aov(all_b ~ as.factor(labels0), data=dat)
summary(aov.1)
y_dbar
aov(all_brand ~ as.factor(labels), data=dat)
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
qvalues
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",row.names=F)
getwd()
setwd("C:/fp-nkullman-gclenagh-wfyang")
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
qvalues
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",row.names=F)
p.adjust
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
pvalues
library(Deducer)
mismatches = read.csv("rv144.env.mismatch.distance.csv",sep=",",stringsAsFactors=FALSE)
treatment = read.csv("rv144_trt_lookup.csv",sep=",",stringsAsFactors=FALSE)
names(mismatches)[1] = "sampleID"
thedata = merge(mismatches,treatment,by="sampleID")[-1]
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
print(i)
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
qvalues = p.adjust(pvalues,method = "fdr")
temp = data.frame(pvalues)
names(temp)[1] = "pvalue"
write.csv(temp,"pvalues.csv",row.names=F)
write.csv(temp,"qvalues.csv",row.names=F)
for(i in 1:length(qvalues)){
if(is.na(qvalues[i])){
pqvalues[i] = 1
}
}
temp = data.frame(pvalues)
temp2 = data.frame(qvalues)
names(temp)[1] = "pvalue"
names(temp)[2] = "qvalue"
write.csv(temp,"pvalues.csv",row.names=F)
write.csv(temp2,"qvalues.csv",row.names=F)
qvalue
qvalues
pvalues
qvalue
qvalues
min(pvalues)
p.adjust(pvalues,method="fdr")
qvalues = p.adjust(pvalues,method = "fdr")
for(i in 1:length(qvalues)){
if(is.na(qvalues[i])){
qvalues[i] = 1
}
}
qvalues = p.adjust(pvalues,method = "fdr")
for(i in 1:length(qvalues)){
if(is.na(qvalues[i])){
qvalues[i] = 1
}
}
qvalues
pvalues
id = order(pvalues)
temp = p[id]
temp = pvalues[id]
temp
q = temp*n/(1:n)
q = temp*1011/(1:1011)
q
neq.q = rev(cummin(rev(q)))
neq.q
p = rep(0.01,100)
p.adjust(p,method="fdr")
p  = 0.01*(1:100)
p
p.adjust(p,"fdr")
p  = 0.001*(1:100)
p.adjust(p,"fdr")
p
pvalues = c()
for(i in 1:(ncol(thedata)-1)){
print(i)
pvalues = c(pvalues,perm.t.test(thedata[,i][(thedata[,1012] == "VACCINE")]
,thedata[,i][(thedata[,1012] == "PLACEBO")]
,alternative = "two.sided",B=10000)$p.value)
}
qvalues = p.adjust(pvalues,method = "fdr")
qvalues
min(qvalues)
na.rm
na.rm()
min(qvalues,na.rm)
qvalues = p.adjust(pvalues,method = "fdr")
for(i in 1:length(qvalues)){
if(is.na(qvalues[i])){
qvalues[i] = 1
}
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
temp = data.frame(pvalues)
temp2 = data.frame(qvalues)
names(temp)[1] = "pvalue"
names(temp)[2] = "qvalue"
write.csv(temp,"pvalues.csv",row.names=F)
write.csv(temp2,"qvalues.csv",row.names=F)
for(i in 1:length(qvalues)){
if(is.na(qvalues[i])){
qvalues[i] = 1
}
}
for(i in 1:length(pvalues)){
if(is.na(pvalues[i])){
pvalues[i] = 1
}
}
temp = data.frame(pvalues)
temp2 = data.frame(qvalues)
names(temp)[1] = "pvalue"
names(temp2)[1] = "qvalue"
write.csv(temp,"pvalues.csv",row.names=F)
write.csv(temp2,"qvalues.csv",row.names=F)
